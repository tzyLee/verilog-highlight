<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>$schema</key>
    <string>https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json</string>
    <key>name</key>
    <string>Verilog</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#module-declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#keywords</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#strings</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#constants</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.verilog</string>
            <key>match</key>
            <string>\b(if|else|while|for|forever|repeat|wait|disable)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.module.verilog</string>
            <key>comment</key>
            <string>use when `module` or `macromodule` is typed, but the declaration is not complete</string>
            <key>match</key>
            <string>\b(module|macromodule)\b</string>
          </dict>
        </array>
      </dict>
      <key>strings</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.verilog</string>
        <key>begin</key>
        <string>"</string>
        <key>end</key>
        <string>"</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.verilog</string>
            <key>match</key>
            <string>\\([nt\\"]|[0-7]{1,3})</string>
          </dict>
        </array>
      </dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.verilog</string>
            <key>begin</key>
            <string>/\*</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.verilog</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.verilog</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.stry-comment-end.verilog</string>
            <key>match</key>
            <string>\*/.*\n</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^[ \t]+)?(?=//)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.verilog</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.verilog</string>
                <key>begin</key>
                <string>//</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.verilog</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>\n</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.verilog</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#number-real</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#number-dec</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#number-hex</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#number-oct</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#number-bin</string>
              </dict>
              <dict>
                <key>name</key>
                <string>invalid.illegal.name.verilog"</string>
                <key>match</key>
                <string>\b[0-9]+\w+</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>number-bin</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.bin.verilog</string>
        <key>match</key>
        <string>(?x)
  (?&lt;![\w\.])          # not precede by a word
  (
    ([1-9][_0-9]*)?    # size
    '[sS]?[bB]         # binary base
  )
  [01xXzZ?][_01xXzZ?]* # binary value
  \b                   # boundary</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.number.verilog</string>
          </dict>
        </dict>
      </dict>
      <key>number-oct</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.oct.verilog</string>
        <key>match</key>
        <string>(?x)
  (?&lt;![\w\.])            # not precede by a word
  (
    ([1-9][_0-9]*)?      # size
    '[sS]?[oO]           # octal base
  )
  [0-7xXzZ?][_0-7xXzZ?]* # octal value
  \b                     # boundary</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.number.verilog</string>
          </dict>
        </dict>
      </dict>
      <key>number-hex</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.hex.verilog</string>
        <key>match</key>
        <string>(?x)
  (?&lt;![\w\.])                        # not precede by a word
  (
    ([1-9][_0-9]*)?                  # size
    '[sS]?[hH]                       # hex base
  )
  [0-9a-fA-FxXzZ?][_0-9a-fA-FxXzZ?]* # hex value
  \b                                 # boundary</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.number.verilog</string>
          </dict>
        </dict>
      </dict>
      <key>number-dec</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.dec.verilog</string>
        <key>match</key>
        <string>(?x)
  (?:
    (?&lt;![\w\.])                      # not precede by a word
      [1-9][_0-9]*
    | (?:
      (
        ([1-9][_0-9]*)?        # size
        '[sS]?[dD]                   # decimal base
      )
        [1-9][_0-9]*           # unsigned number
      | [xXzZ?]_*
    )
  )
  (?!')                              # not followed by a ' (allowing bin, hex ... to match)
  \b                                 # boundary</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.number.verilog</string>
          </dict>
        </dict>
      </dict>
      <key>number-real</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.float.verilog</string>
        <key>match</key>
        <string>(?x)
  (?&lt;![\w\.])                           # not precede by a word
  (?:
      [1-9][_0-9]*\. [1-9][_0-9]*     # unsigned number . unsigned number
    | [1-9][_0-9]*(?:\. [1-9][_0-9]*)?
      [eE] [+-]? [1-9][_0-9]*          # exp sign unsigned number
  )
  (?!')                                 # not followed by a ' (allowing dec, bin ... to match)
  \b                                    # boundary</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.number.verilog</string>
          </dict>
        </dict>
      </dict>
      <key>net-types</key>
      <dict>
        <key>name</key>
        <string>support.type.verilog</string>
        <key>match</key>
        <string>\b(supply0|supply1|tri|triand|trior|tri0|tri1|uwire|wire|wand|wor)\b</string>
      </dict>
      <key>module-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.module.verilog</string>
        <key>begin</key>
        <string>(?x)
  # TODO attribute
  \b(module|macromodule)\b         # module keyword
  (?:\s)+
  \b([_a-zA-Z][_a-zA-Z$0-9]*)\b    # module identifier</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.module.verilog</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.module.verilog</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(;|(?=(?://)|(?:/\*)|\n)|(\bendmodule\b))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.module.begin.verilog</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.module.verilog</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#module-declaration-header</string>
          </dict>
        </array>
      </dict>
      <key>module-declaration-header</key>
      <dict>
        <key>begin</key>
        <string>(?x)
  # parameters
  # port list or port declarations</string>
        <key>end</key>
        <string>;</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#module-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#module-port</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#module-port-declarations</string>
          </dict>
        </array>
      </dict>
      <key>module-parameter</key>
      <dict>
        <key>begin</key>
        <string>#(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <string>punctuation.definition.parameters.begin.verilog</string>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <string>punctuation.definition.parameters.end.verilog</string>
        </dict>
        <key>end</key>
        <string>)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x)
  \b(parameter)\b   # parameter keyword
  \s+
  \b(signed)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.list.verilog</string>
            <key>match</key>
            <string>,(?!\))</string>
          </dict>
        </array>
      </dict>
      <key>parameter-declaration</key>
      <dict>
        <key>match</key>
        <string>(parameter)
  (?:signed)? # TODO range
| (integer|real|realtime|time) # parameter_type
</string>
      </dict>
    </dict>
    <key>scopeName</key>
    <string>source.verilog</string>
  </dict>
</plist>