---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Verilog

variables:
  startOfIdentifier: '(?<![_$[:alnum:]])(?<!\.)'
  normalIdentifier: "[_a-zA-Z][_$a-zA-Z0-9]*"
  escapedIdentifier: '\\[!-~]+(?=\s)'
  systemIdentifier: '\$[[:alnum:]_$]+'
  identifier: "[_a-zA-Z][_$a-zA-Z0-9]*|{{escapedIdentifier}}|{{systemIdentifier}}"
  variableIdentifier: "[_a-zA-Z][_$a-zA-Z0-9]*|{{escapedIdentifier}}"
  unsignedNum: "[0-9][_0-9]*"
  nonZeroUnsignedNum: "[1-9][_0-9]*"
  commentOrSpace: '(/\*.*\*/)|(//.*\n)|\s'
  constantIdentifier: '[_[:upper:]][_$[:digit:][:upper:]]*'
  constantVar: '({{constantIdentifier}})(?![_$[:alnum:]])'
  netTypes: 'supply0|supply1|tri|triand|trior|tri0|tri1|uwire|wire|wand|wor'

# TODO: check (begin:) and (end:) does not match `begin, `end, \begin ...
patterns:
  - include: "#module-declaration"
  - include: '#compiler-directive'
  - include: "#keywords"
  - include: "#strings"
  - include: "#comments"
  - include: "#constants"

repository:
  keywords:
    comment: "Used when keyword is typed, but the statement is incomplete"
    patterns:
      - name: keyword.control.verilog
        match: '\b(if|else|ifnone|while|for|forever|repeat|wait|disable|case|casex|casez|default|endcase)\b'
      - name: storage.type.module.verilog
        match: '\b(module|macromodule|endmodule)\b'
      - name: storage.type.function.verilog
        match: '\b(function|endfunction)\b'
      - name: storage.type.task.verilog
        match: '\b(task|endtask)\b'
      - name: keyword.control.verilog
        match: '\b(always|initial)\b'
      - name: keyword.other.verilog
        match: '\b(posedge|negedge|or|edge)\b'
      - name: support.type.verilog
        match: '\b(event|reg|trireg)\b'
      - name: keyword.other.block.verilog
        match: '\b(begin|end|fork|join)\b'
      - name: keyword.other.assign.verilog
        match: '\b(assign)\b'
      - name: keyword.other.port.verilog
        match: '\b(input|output|inout)\b'
      - name: keyword.other.verilog
        match: '\b(parameter|localparam|specparam)\b'
      - name: keyword.other.verilog
        match: '\b(signed|automatic|vectored|scalared)\b'
      - include: '#system-tasks-and-functions'
      - include: '#net-types'
      - include: "#parameter-types"
  net-types:
    name: support.type.verilog
    match: '\b({{netTypes}})\b'
  parameter-types:
    patterns:
      - include: "#output-variable-types"
      - include: "#real-types"
  output-variable-types:
    name: support.type.verilog
    match: '\b(time|integer)\b'
  real-types:
    name: support.type.verilog
    match: '\b(real|realtime)\b'
# A.1.2
  module-declaration:
    name: meta.module.verilog
    begin: '\b(module|macromodule)'
    beginCaptures:
      "1": { name: storage.type.module.verilog }
    end: '\b(endmodule)\b'
    endCaptures:
      "1": { name: storage.type.module.verilog }
    patterns:
      - include: "#module-declaration-header"
      - include: '#comments'
      - include: '#module-body'
  module-declaration-header:
    begin: '(?<=module|macromodule)'
    end: ";"
    endCaptures:
      '0': { name: punctuation.section.module.begin.verilog }
    patterns:
      - include: '#comments'
      - name: entity.name.type.module.verilog
        match: '{{variableIdentifier}}'
      - include: "#module-parameter"
      - include: '#list-of-ports'
  module-body:
    name: meta.module.body.verilog
    begin: '(?<=;)'
    end: '(?=endmodule)'
    patterns:
      - include: "#module-item"
# A.1.3
  list-of-ports:
    begin: '\('
    beginCaptures:
      '0': { name: punctuation.definition.ports.begin.verilog }
    end: '\)'
    endCaptures:
      '0': { name: punctuation.definition.ports.end.verilog }
    patterns:
      - include: '#comments'
      - include: '#port-declarations'
      - include: '#punctuation-comma'
      - include: '#identifiers'
      - begin: '\('
        end: '\)'
        patterns:
          - include: '#port-expression'
      - name: punctuation.accessor.port.verilog
        match: '\.'
      - include: '#port-expression'
  port-expression:
    patterns:
      - include: '#punctuation-comma'
      - include: '#port-reference'
  port-reference:
    patterns:
      - include: '#identifiers'
      - include: '#item-access'
# A.1.4
  module-item:
    patterns:
      - include: '#comments'
      - include: '#port-declaration-statement'
      - include: '#non-port-module-item'
  non-port-module-item:
    patterns:
      - include: '#generate-region'
      - include: '#specify-block'
      - include: '#specparam-declaration'
      - include: '#module-or-generate-item'
  module-or-generate-item:
    patterns:
      - include: '#compiler-directive'
      - include: '#local-parameter-declaration'
      - include: '#module-or-generate-item-declaration'
      - include: '#continuous-assignment'
      - name: keyword.control.verilog
        match: '\b(always|initial)\b'
      # Textmate can't easily capture `always`, `inital`, (no simply way to tell apart module instantiation and variable assignment)
      # moving `statement` and `timing control` to this level is easier
      - include: "#statement"
      # loop-generate-construct is treated as loop-statement
      # conditional-generate-construct is treated as conditional-statement
  module-or-generate-item-declaration:
    patterns:
      - include: '#net-declaration'
      - include: '#reg-declaration'
      - include: '#var-declaration'
      - include: '#function-declaration'
      - include: '#task-declaration'
# A.2.1.1
  module-parameter:
    begin: '#\('
    beginCaptures:
      "0": { name: punctuation.definition.parameters.begin.verilog }
    endCaptures:
      "0": { name: punctuation.definition.parameters.end.verilog }
    end: '\)'
    patterns:
      - name: keyword.other.verilog
        match: '\b(parameter|signed)\b'
      - include: '#range'
      - include: '#parameter-types'
      - include: '#parameter-assignment'
      - include: '#punctuation-comma'
  parameter-assignment:
    patterns:
      - include: '#comments'
      - include: '#identifiers'
      - include: '#punctuation-assignment'
      - include: '#expression'
  local-parameter-declaration: # merge parameter and localparam for brevity
    begin: '\b(localparam|parameter)\b'
    beginCaptures:
      '1': { name: keyword.other.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctution.terminator.statement.verilog }
    patterns:
      - name: keyword.other.verilog
        match: '\b(signed)\b'
      - include: '#range'
      - include: '#parameter-types'
      - include: '#parameter-assignment'
      - include: '#punctuation-comma'
  specparam-declaration:
    begin: '\b(specparam)\b'
    beginCaptures:
      '1': { name: keyword.other.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctution.terminator.statement.verilog }
    patterns:
      - name: keyword.other.verilog
        match: '\b(signed)\b'
      - include: '#range'
      - include: '#pulse-control-specparam'
      - include: '#parameter-types'
      - include: '#parameter-assignment'
      - include: '#punctuation-comma'
# A.2.1.2
  port-declarations:
    begin: '\b(inout|output|input)\b'
    beginCaptures:
      '1': { name: keyword.other.port.verilog }
    end: '(?=\b(inout|output|input)|\);)' # TODO: ) and ; may not be on the same line
    patterns:
      - include: '#port-declaration-content'
  port-declaration-statement:
    begin: '\b(inout|output|input)\b'
    beginCaptures:
      '1': { name: keyword.other.port.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns:
      - include: '#port-declaration-content'
  port-declaration-content:
    patterns:
      - name: support.type.reg.verilog
        match: '\breg\b'
      - include: '#net-types'
      - name: keyword.other.verilog
        match: '\bsigned\b'
      - include: '#range'
      - include: '#list-of-identifiers'
      - include: '#list-of-variable-port-identifiers'
# A.2.1.3
  net-declaration:
    begin: '\b({{netTypes}}|trireg)\b'
    beginCaptures:
      '1': { name: support.type.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns:
      # TODO charge strength, drive strength
      - name: keyword.other.verilog
        match: '\b(vectored|scalared)\b'
      - name: keyword.other.verilog
        match: '\b(signed)\b'
      - include: '#range'
      # TODO delay3
      - include: '#list-of-identifiers'
      # TODO list-of-assignments
  reg-declaration:
    begin: '\b(reg)\b'
    beginCaptures:
      '1': { name: support.type.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns:
      - name: keyword.other.verilog
        match: '\b(signed)\b'
      - include: '#range'
      - include: '#list-of-identifiers'
  var-declaration:
    begin: '\b(event|real|realtime|integer|time|genvar)\b'
    beginCaptures:
      '1': { name: support.type.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns:
      - include: '#list-of-identifiers'
# A.2.3
  list-of-identifiers:
    patterns:
      - include: '#identifiers'
      - include: "#punctuation-comma"
  list-of-variable-port-identifiers:
    patterns:
      - include: '#identifiers'
      - include: '#punctuation-assignment'
      - include: '#expression'
      - include: "#punctuation-comma"
# A.2.4
  pulse-control-specparam:
    begin: 'PATHPULSE\$'
    beginCaptures:
      '0': { name: keyword.other.verilog }
    end: '(?=\s|\/\/|\/\*|=)'
    patterns:
      - name: keyword.other.verilog
        match: '\$'
      - name: variable.other.readwrite.verilog
        # assume there's no \$ in input / output identifiers
        match: '[_a-zA-Z][_a-zA-Z0-9]*|{{escapedIdentifier}}'
      - include: '#item-access'
# A.2.5
  range:
    patterns:
      - include: "#item-access"
# A.2.6
  function-declaration:
    begin: '\b(function)\b'
    beginCaptures:
      '1': { name: storage.type.function }
    end: '\b(endfunction)\b'
    endCaptures:
      '1': { name: storage.type.function }
    patterns:
      - include: '#function-declaration-header'
      - include: '#block-item-declaration'
      - include: '#port-declaration-statement'
      - include: '#statement'
  function-declaration-header:
    begin: '(?<=function)'
    end: ";"
    endCaptures:
      '0': { name: punctuation.section.function.begin.verilog }
    patterns:
      - include: '#comments'
      - name: keyword.other.verilog
        match: '\b(automatic|signed)\b'
      - include: '#output-variable-types'
      - include: '#real-types'
      - include: '#range'
      - name: entity.name.function.verilog
        match: '{{variableIdentifier}}'
      - include: '#list-of-ports'
# A.2.7
  task-declaration:
    begin: '\b(task)\b'
    beginCaptures:
      '1': { name: storage.type.task }
    end: '\b(endtask)\b'
    endCaptures:
      '1': { name: storage.type.task }
    patterns:
      - include: '#task-declaration-header'
      - include: '#block-item-declaration'
      - include: '#port-declaration-statement'
      - include: '#statement'
  task-declaration-header:
    begin: '(?<=task)'
    end: ";"
    endCaptures:
      '0': { name: punctuation.section.task.begin.verilog }
    patterns:
      - include: '#comments'
      - name: keyword.other.verilog
        match: '\b(automatic)\b'
      - name: entity.name.function.task.verilog
        match: '{{variableIdentifier}}'
      - include: '#list-of-ports'
# A.2.8
  block-item-declaration:
    patterns:
      - include: '#net-declaration'
      - include: '#reg-declaration'
      - include: '#var-declaration'
      - include: '#local-parameter-declaration'
# A.4.2
  generate-region:
    name: meta.generate.verilog
    begin: '\b(generate)\b'
    beginCaptures:
      '1': { name: storage.type.generate.verilog } # use storage.type for consistency
    end: '\b(endgenerate)\b'
    endCaptures:
      '1': { name: storage.type.generate.verilog }
    patterns:
      - include: '#module-or-generate-item'
# A.6.1
  continuous-assignment:
    name: meta.continuous-assignment.verilog
    begin: '\b(assign)\b'
    beginCaptures:
      '1': { name: keyword.other.assign.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns: # TODO drive_strength, delay3
      - include: '#list-of-net-assignments'
  list-of-net-assignments:
    patterns:
      - include: '#comments'
      - include: '#assignment'
      - include: '#punctuation-comma'
  assignment:
    patterns:
      - include: '#comments'
      - include: '#punctuation-assignment'
      - include: '#lvalue'
# A.6.2
  blocking-assignment:
    patterns:
      - include: '#comments'
      - begin: '='
        beginCaptures:
          '0': { name: keyword.operator.assign.verilog }
        end: ';'
        endCaptures:
          '0': { name: punctuation.terminator.statement.verilog }
        patterns:
          # capture expressions in-between = and ; to avoid ternary operators being parsed as block labels
          - include: '#expression'
      - include: '#lvalue'
  nonblocking-assignment:
    patterns:
      - include: '#comments'
      - begin: '<='
        beginCaptures:
          '0': { name: keyword.operator.nonblocking-assignment.verilog }
        end: ';'
        endCaptures:
          '0': { name: punctuation.terminator.statement.verilog }
        patterns:
          # capture expressions in-between <= and ; to avoid ternary operators being parsed as block labels
          - include: '#expression'
      - include: '#lvalue'
# A.6.3
  parallel-block:
    name: meta.parallel-block.verilog
    begin: '\b(fork)\b'
    beginCaptures:
      '1': { name: keyword.other.block.verilog }
    end: '\b(join)\b'
    endCaptures:
      '1': { name: keyword.other.block.verilog }
    patterns:
      - include: '#block-label'
      - include: '#statement'
  sequential-block:
    name: meta.sequential-block.verilog
    begin: '\b(begin)\b'
    beginCaptures:
      '1': { name: keyword.other.block.verilog }
    end: '\b(end)\b'
    endCaptures:
      '1': { name: keyword.other.block.verilog }
    patterns:
      - include: '#block-label'
      - include: '#statement'
  block-label:
    begin: ':(?!=({{commentOrSpace}})*[^_$[:alnum:]`\\])'
    beginCaptures:
      '0': { name: entity.name.label }
    end: '({{variableIdentifier}})'
    endCaptures:
      '0': { name: entity.name.label }
    patterns:
      - include: '#comments'
# A.6.4
  statement: # TODO
    patterns:
      - include: '#comments'
      - include: '#compiler-directive'
      - include: '#parallel-block'
      - include: '#sequential-block'
      - include: '#conditional-statement'
      - include: '#loop-statement'
      - include: '#wait-statement'
      - include: '#disable-statement'
      - include: '#case-statement'
      - include: '#task-enable' # need to be before assignments
      # highlight module type when two identifiers are separated by space and on the same line
      # the cost of distinguishing the form of module instantiation and assignment is too high
      # currently module instantiation is variable + function call or variable + variable + round-brace
      - name: entity.name.type.module.verilog
        match: '({{variableIdentifier}})(?<![#@])(?=({{commentOrSpace}})+({{variableIdentifier}}))'
      - include: '#blocking-assignment'
      - include: '#nonblocking-assignment'
      - include: '#procedural-timing-control'
      - begin: '\(' # condition of for loop
        end: '\)'
        patterns:
          - include: '#assignment'
          - name: punctuation.separator.statement.verilog
            match: ';'
          - include: '#expression'
  statement-or-null:
    patterns:
      - include: '#statement'
      # TODO attribute ;
# A.6.5
  delay-control:
    patterns:
      - begin: '#(?=({{commentOrSpace}})*[\(\n])' # Make sure there's nothing between # and (
        beginCaptures:
          '0': { name: keyword.operator.delay.verilog }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.definition.delay-expression.end.verilog }
        patterns:
          - include: '#comments'
          - name: punctuation.definition.delay-expression.begin.verilog
            match: '\('
          - include: '#expression'
      - name: keyword.operator.delay.verilog
        match: '#'
      - name: constant.numeric.unsigned.verilog
        match: "{{unsignedNum}}(?!')"
      - include: '#number-real'
      - include: '#identifier'
  event-control:
    name: entity.event-control.verilog
    patterns:
      - begin: '(@)'
        beginCaptures:
          '1': { name: keyword.operator.event.verilog }
        end: '(\))'
        endCaptures:
          '1': { name: punctuation.definition.event.end.verilog }
        patterns:
          - name: punctuation.definition.event.begin.verilog
            match: '\('
          - name: keyword.other.event.verilog
            match: '\*'
          - include: '#comments'
          - include: '#event-expression'
      - begin: '(@)'
        beginCaptures:
          '1': { name: keyword.operator.event.verilog }
        end: '(\*)'
        endCaptures:
          '1': { name: keyword.other.event.verilog }
        patterns:
          - include: '#comments'
      - name: keyword.operator.event.verilog
        match: '@'
      - include: '#hierarchical-identifier'
  event-expression:
    patterns:
      - name: keyword.other.verilog
        match: '\b(posedge|negedge|or)\b'
      - include: '#expression'
  procedural-timing-control:
    patterns:
      - include: '#delay-control'
      - include: '#event-control'
  wait-statement:
    patterns:
      - name: keyword.control.verilog
        match: '\b(wait)\b'
  disable-statement:
    patterns:
      - name: keyword.control.verilog
        match: '\b(disable)\b'
# A.6.6
  conditional-statement:
    patterns:
      - name: keyword.control.verilog
        match: '\b(if|else)\b'
# A.6.7
  case-statement:
    begin: '\b(case|casez|casex)\b'
    beginCaptures:
      '1': { name: keyword.control.verilog }
    end: '\b(endcase)\b'
    endCaptures:
      '1': { name: keyword.control.verilog }
    patterns:
      - begin: '\('
        beginCaptures:
          '0': { name: punctuation.definition.case-expression.begin.verilog }
        end: '\)'
        endCaptures:
          '0': { name: punctuation.definition.case-expression.end.verilog }
        patterns:
          - include: '#expression'
      - name: keyword.control.verilog
        match: '\bdefault\b'
      - name: punctuaton.definition.section.case.verilog
        match: ':'
      - include: '#statement-or-null'
      - include: '#expression-list'
# A.6.8
  loop-statement:
    patterns:
      - name: keyword.control.verilog
        match: '\b(forever|repeat|while|for)\b'
# A.6.9
  task-enable:
    # Most of the cases are matched as function calls,
    # The rule exists to highlight the task identifier
    match: '({{variableIdentifier}})(?=[\(;])'
    captures:
      '1': { name: entity.name.function.call.verilog }
# A.7.1
  specify-block:
    name: meta.specify.verilog
    begin: '\b(specify)\b'
    beginCaptures:
      '1': { name: storage.type.specify } # use storage.type for consistency
    end: '\b(endspecify)\b'
    endCaptures:
      '1': { name: storage.type.specify }
    patterns:
      - include: '#specify-item'
  specify-item:
    patterns:
      - include: '#comments'
      - include: '#compiler-directive'
      - include: '#specparam-declaration'
      - include: '#pulsestyle-showcancelled-declaration'
      - include: '#path-declaration'
      - include: '#system-timing-check'
  pulsestyle-showcancelled-declaration:
    begin: '\b(pulsestyle_on(event|detect)|(no)?showcancelled)\b'
    beginCaptures:
      '1': { name: keyword.other.verilog}
    end: ';'
    endCaptures:
      '0': { name: punctution.terminator.statement.verilog }
    patterns:
      - include: '#list-of-path-input-output'
# A.7.2
  path-declaration:
    patterns:
      - include: '#simple-and-edge-sensitive-path-declaration'
      - name: keyword.control.verilog
        match: '\b(if|ifnone)\b'
  simple-and-edge-sensitive-path-declaration:
    begin: '(?=\()'
    end: ';'
    endCaptures:
      '0': { name: punctution.terminator.statement.verilog }
    patterns:
      - include: '#path-description'
      - include: '#path-delay-value'
  path-description:
    begin: '\('
    beginCaptures:
      '0': { name: punctuation.definition.path.begin.verilog }
    end: '\)'
    endCaptures:
      '0': { name: punctuation.definition.path.end.verilog }
    patterns:
      - name: keyword.operator.path.verilog
        match: '[\*=]>'
      - name: punctuation.sepeartor.colon.verilog
        match: ':'
      - name: keyword.other.verilog
        match: '\b(posedge|negedge)\b'
      - include: '#polarity-operator'
      - include: '#list-of-path-input-output'
  list-of-path-input-output:
    patterns:
      - include: '#punctuation-comma'
      - include: '#identifiers' # terminal_descriptor: identifier + item-access
      - include: '#item-access'
# A.7.4
  polarity-operator:
    name: keyword.operator.verilog
    match: '[+-]'
  path-delay-value:
    begin: '='
    beginCaptures:
      '0': { name: keyword.operator.assignment.verilog }
    end: '(?=;)'
    patterns:
      - include: '#expression' # path-delay-expression is expression
# A.7.5
  system-timing-check:
    begin: '(\$(?:setup|hold|setuphold|recovery|removal|recrem|skew|timeskew|fullskew|period|width|nochange))\b'
    beginCaptures:
      '1': { name: entity.name.function.call.timing-check.verilog }
    end: ';'
    endCaptures:
      '0': { name: punctuation.terminator.statement.verilog }
    patterns:
      - begin: '\('
        end: '\)'
        patterns:
          - name: keyword.operator.verilog
            match: '&&&'
          - include: '#edge-control-specifier'
          - name: keyword.other.verilog
            match: '\b(posedge|negedge|or|edge)\b'
          - include: '#punctuation-comma'
          - include: '#expression'
  edge-control-specifier:
    begin: '\b(edge)\b'
    beginCaptures:
      '1': { name: keyword.other.verilog }
    end: '\]'
    endCaptures:
      '0': { name: punctuation.definition.edge.end.verilog }
    patterns:
      - name: punctuation.definition.edge.begin.verilog
        match: '\['
      - include: '#punctuation-comma'
      - name: constant.numeric.verilog
        match: '[01xXzZ]'
# A.8.1
  concatenation:
    name: meta.concatenation.verilog
    begin: '{'
    beginCaptures:
      '0': { name: punctuation.concatenation.begin.verilog }
    end: '}'
    endCaptures:
      '0': { name: punctuation.concatenation.end.verilog }
    patterns:
      - include: "#expression"
      - include: "#punctuation-comma"

# A.8.2 # TODO hierarchical_identifier
  function-call: # TODO attribute # TODO multiline
    name: meta.function-call.verilog
    begin: |-
      (?x)
        (?=({{identifier}}) ({{commentOrSpace}})* (\())
    end: '(\))'
    endCaptures:
      '1': { name: punctuation.definition.arguments.end.verilog }
    patterns:
      - include: '#comments'
      - include: "#function-name"
      - include: "#function-arguments"
  function-name:
    patterns:
      - include: "#system-tasks-and-functions"
      - name: entity.name.function.call.system.verilog
        match: '{{systemIdentifier}}'
      - name: entity.name.function.call.verilog
        match: '{{variableIdentifier}}'
      - name: entity.name.function.preprocessor.verilog
        match: '`({{variableIdentifier}})'
  system-tasks-and-functions:
    name: support.function.builtin.verilog
    match: |-
      (?x)
        \b(
          \$display[bho]?|\$strobe[bho]?|\$write[bho]?|\$monitor[bho]?|\$monitoroff|\$monitoron|                            # Display tasks
          \$fclose|\$fdisplay[bho]?|\$swrite[bho]?|\$fscanf|\$fread|\$fseek|\$fflush|\$feof|\$sdf_annotate|                 # File I/O tasks
          \$fopen|\$fwrite[bho]?|\$fmonitor[bho]?|\$sformat|\$fgetc|\$ungetc|
          \$fgets|\$sscanf|\$rewind|\$ftell|\$ferror|\$readmem[bh]|
          \$printtimescale|\$timeformat|                                                                                    # Timescale tasks
          \$finish|\$stop|                                                                                                  # Simulation control tasks
          \$async\$(?:and|nand|or|nor)\$array|\$async\$(?:and|nand|or|nor)\$plane|                                          # PLA modeling tasks
          \$sync\$(?:and|nand|or|nor)\$array|\$sync\$(?:and|nand|or|nor)\$plane|
          \$q_initialize|\$q_add|\$q_remove|\$q_full|\$q_exam|                                                              # Stochastic analysis tasks
          \$realtime|\$stime|\$time|                                                                                        # Simulation time functions
          \$bitstoreal|\$realtobits|\$itor|\$rtoi|\$signed|\$unsigned|                                                      # Conversion functions
          \$random|\$dist_chi_square|\$dist_erlang|\$dist_normal|\$dist_exponential|\$dist_poisson|\$dist_t|\$dist_uniform| # Probabilistic distribution functions
          \$test\$plusargs|\$value\$plusargs|                                                                               # Command line input
          \$clog2|\$asin|\$ln|\$acos|\$log10|\$atan|\$exp|\$atan2|\$sqrt|\$hypot|\$pow|\$sinh|\$floor|                      # Math functions
          \$cosh|\$ceil|\$tanh|\$sin|\$asinh|\$cos|\$acosh|\$tna|\$atanh|
          \$dumpfile|\$dumpvars|\$dumpoff|\$dumpon|\$dumpall|\$dumplimit|\$dumpflush|                                       # VCD related
          \$countdrivers|\$getpattern|\$incsave|\$input|\$key|\$list|\$log|\$nokey|\$nolog|\$reset|\$reset_count|           # Annex C
          \$reset_value|\$restart|\$save|\$scale|\$scope|\$showscopes|\$showvars|\$sreadmemb|\$sreadmemh
        )\b
  function-arguments:
    begin: '(\()'
    beginCaptures:
      '1': { name: punctuation.definition.arguments.begin.verilog }
    end: '(?=\))'
    patterns:
      - include: "#expression-list"
# A.8.3
  expression:
    patterns:
      - include: "#expression-without-identifiers"
      - include: "#hierarchical-identifier"
  expression-without-identifiers:
    patterns:
      - include: "#comments"
      - include: "#strings"
      - include: "#constants"
      - include: "#operator"
      - include: "#concatenation"
      - include: "#item-access"
      - include: "#round-braces"
      - include: "#function-call"
  round-braces:
    begin: '\('
    end: '\)'
    beginCaptures:
      "0": { name: punctuation.parenthesis.begin.verilog }
    endCaptures:
      "0": { name: punctuation.parenthesis.end.verilog }
    patterns:
      - include: "#expression"
  expression-list:
    patterns:
      - include: "#expression"
      - include: "#punctuation-comma"
# A.8.4
  item-access:
    name: meta.item-aceess.verilog
    begin: '(?=\[)'
    end: '\]'
    endCaptures:
      '0': { name: punctuation.definition.end.bracket.verilog }
    patterns:
      - include: "#item-index"
      - include: "#expression"
  item-index: # merge item access and range expression
    name: meta.item-index.verilog
    begin: '\['
    beginCaptures:
      '0': { name: punctuation.definition.begin.bracket.verilog }
    end: '(?=\])'
    patterns:
      - name: punctuation.separator.range.verilog
        match: '\+:'
      - name: punctuation.separator.range.verilog
        match: '-:'
      - name: punctuation.seperator.range.verilog
        match: ':'
      - include: '#expression'
# A.8.5
  lvalue:
    patterns:
      # - include: "#comments"
      - include: "#hierarchical-identifier"
      - include: "#concatenation"
      - include: "#item-access"
# A.8.6
  operator:
    comment: "Operators are order in a way such that more specific operators will come first (e.g. !== comes before !=)"
    match: |-
      (?x)
        (!== | === | != | == | >= | <=) # comparison operator
        | (&& | \|\| | !) # logical operator
        | (>>> | <<< | >> | << | ~& | ~\| | ~\^ | ~ | & | \| | \^~ | \^) # bitwise operator
        | (\*\* | \* | \+ | - | % | /) # arithmetic operator
        | (> | <) # comparison operator
        | (\? | :) # ternary operator
    captures:
      "1": { name: keyword.operator.comparison.verilog }
      "2": { name: keyword.operator.logical.verilog }
      "3": { name: keyword.operator.bitwise.verilog }
      "4": { name: keyword.operator.arithmetic.verilog }
      "5": { name: keyword.operator.comparison.verilog }
      "6": { name: keyword.operator.ternary.verilog }
# A.8.7
  constants:
    patterns:
      - name: constant.numeric.verilog
        patterns:
          - include: "#number-real"
          - include: "#number-dec"
          - include: "#number-hex"
          - include: "#number-oct"
          - include: "#number-bin"
          - name: invalid.illegal.name.verilog"
            match: '\b[0-9]+\w+' # identifier can't start with number
  number-bin:
    name: constant.numeric.bin.verilog
    match: |-
      (?x)
        (?<![\w\.]) # not precede by a word
        (
          ({{nonZeroUnsignedNum}})? # size
          '[sS]?[bB] # binary base
        )
        [01xXzZ?][_01xXzZ?]* # binary value
        \b # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-oct:
    name: constant.numeric.oct.verilog
    match: |-
      (?x)
        (?<![\w\.]) # not precede by a word
        (
          ({{nonZeroUnsignedNum}})? # size
          '[sS]?[oO] # octal base
        )
        [0-7xXzZ?][_0-7xXzZ?]* # octal value
        \b # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-hex:
    name: constant.numeric.hex.verilog
    match: |-
      (?x)
        (?<![\w\.]) # not precede by a word
        (
          ({{nonZeroUnsignedNum}})? # size
          '[sS]?[hH] # hex base
        )
        [0-9a-fA-FxXzZ?][_0-9a-fA-FxXzZ?]* # hex value
        \b # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-dec:
    name: constant.numeric.dec.verilog
    match: |-
      (?x)
        (?:
          (?<![\w\.]) # not precede by a word
            {{unsignedNum}}
          | (?:
            (
              ({{nonZeroUnsignedNum}})? # size
              '[sS]?[dD] # decimal base
            )
              {{unsignedNum}} # unsigned number
            | (?<='[sS]?[dD])[xXzZ?]_*
          )
        )
        (?!') # not followed by a ' (allowing bin, hex ... to match)
        \b # boundary
    captures:
      "1":
        name: storage.type.number.verilog
  number-real:
    name: constant.numeric.float.verilog
    match: |-
      (?x)
        (?<![\w\.]) # not precede by a word
        (?:
            {{unsignedNum}}\. {{unsignedNum}} # unsigned number . unsigned number
          | {{unsignedNum}}(?:\. {{unsignedNum}})?
            [eE] [+-]? {{unsignedNum}} # exp sign unsigned number
        )
        (?!') # not followed by a ' (allowing dec, bin ... to match)
        \b # boundary
    captures:
      "1":
        name: storage.type.number.verilog
# A.8.8
  strings:
    name: string.quoted.double.verilog
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.verilog
        match: '\\([nt\\"]|[0-7]{1,3})'
      # Table 17-2, 17-3
      - name: constant.other.placeholder.verilog
        match: '%[%hHdDoObBcClLvVmMsStTuUzZeEfFgGxX]'
      - name: constant.other.placeholder.verilog
        match: '%[+-0]*\d*(\.\d*)?[%hHdDoObBcClLvVmMsStTuUzZeEfFgGxX]'
# A.9.1
  attribute: # implement attribute as comment
    name: comment.attribute.verilog
    begin: '\(\*(?!\))'
    beginCaptures:
      '0': { name: punctuation.definition.attribute.begin.verilog }
    end: '\*\)'
    endCaptures:
      '0': { name: punctuation.definition.attribute.end.verilog }
# A.9.2
  comments: # from https://github.com/atom/language-c/blob/master/grammars/c.cson
    patterns:
      - name: comment.block.verilog
        begin: '/\*'
        beginCaptures:
          "0": { name: punctuation.definition.comment.begin.verilog }
        end: '\*/'
        endCaptures:
          "0": { name: punctuation.definition.comment.end.verilog }
      - name: invalid.illegal.stry-comment-end.verilog
        match: '\*/.*\n'
      - begin: '(^[ \t]+)?(?=//)'
        beginCaptures:
          "1": { name: punctuation.whitespace.comment.leading.verilog }
        end: '(?!\G)'
        patterns:
          - name: comment.line.double-slash.verilog
            begin: "//"
            beginCaptures:
              "0": { name: punctuation.definition.comment.verilog }
            end: '\n'
      - include: '#attribute'
# A.9.3
  text-macro:
    name: macro.verilog entity.name.function.preprocessor.verilog
    match: '`({{variableIdentifier}})'
  identifiers:
    patterns:
      - include: '#keywords' # fallback
      - include: '#text-macro'
      - name: entity.name.function.call.system.verilog
        match: '{{systemIdentifier}}'
      - name: variable.other.constant.verilog
        match: '{{constantVar}}'
      - name: variable.other.readwrite.verilog
        match: '{{variableIdentifier}}'
  hierarchical-identifier:
    patterns:
      - include: '#identifiers'
      - include: '#item-access'
      - name: punctuation.accessor.verilog
        match: '\.'
  punctuation-comma:
    name: punctuation.separator.comma.verilog
    match: ','
  punctuation-assignment:
    name: keyword.operator.assignment.verilog
    match: '='
# 19 / Annex D
  compiler-directive:
    name: meta.directive.verilog
    begin: |-
      (?x)
        `(begin_keywords|celldefine|default_nettype|define|else|elsif|end_keywords|
          endcelldefine|endif|ifdef|ifndef|include|line|nounconnected_drive|pragma|
          resetall|timescale|unconnected_drive|undef|default_decay_time|default_trireg_strength|
          delay_mode_distributed|delay_mode_path|delay_mode_unit|delay_mode_zero
          )\b
    beginCaptures:
      '0': { name: keyword.control.directive.verilog }
    end: '(\n|(?=\/\/))' # line comment may consume newline
    patterns:
      - include: '#comments'
      - name: keyword.other.verilog
        match: '\b(infinite)\b' # default decay time
      - name: support.type.verilog
        match: '\b({{netTypes}}|trireg|none)\b' # default net-types
      - match: '(10{0,2})\s*([munpf]?s)\b'
        captures:
          '1': { name: constant.numeric.dec.verilog }
          '2': { name: storage.type.unit.verilog }
      - include: '#constants'
      - include: '#strings'
      - include: '#identifiers' # avoid constant macro parsed as function name (for consistency)
      - name: punctuation.seperator.slash.verilog
        match: '/' # for timescale
      - include: '#expression' # for text macro with argument
scopeName: source.verilog
