---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Verilog

variables:
  identifier: "[_a-zA-Z][_$a-zA-Z0-9]*"
  unsignedNum: "[1-9][_0-9]*"
  inlineComment: '/\*.?\*/'

patterns:
  - include: "#module-declaration"
  - include: "#keywords"
  - include: "#strings"
  - include: "#comments"
  - include: "#constants"

repository:
  keywords:
    patterns:
      - name: keyword.control.verilog
        match: "\\b(if|else|while|for|forever|repeat|wait|disable)\\b"
      - name: storage.type.module.verilog
        comment: "use when `module` or `macromodule` is typed, but the declaration is not complete"
        match: '\b(module|macromodule)\b'
  strings:
    name: string.quoted.double.verilog
    begin: '"'
    end: '"'
    patterns:
      - name: constant.character.escape.verilog
        match: '\\([nt\\"]|[0-7]{1,3})'
  comments: # from https://github.com/atom/language-c/blob/master/grammars/c.cson
    patterns:
      - name: comment.block.verilog
        begin: '/\*'
        beginCaptures:
          "0": { name: punctuation.definition.comment.begin.verilog }
        end: '\*/'
        endCaptures:
          "0": { name: punctuation.definition.comment.end.verilog }
      - name: invalid.illegal.stry-comment-end.verilog
        match: '\*/.*\n'
      - begin: '(^[ \t]+)?(?=//)'
        beginCaptures:
          "1": { name: punctuation.whitespace.comment.leading.verilog }
        end: '(?!\G)'
        patterns:
          - name: comment.line.double-slash.verilog
            begin: "//"
            beginCaptures:
              "0": { name: punctuation.definition.comment.verilog }
            end: '\n'
  constants:
    patterns:
      - name: constant.numeric.verilog
        patterns:
          - include: "#number-real"
          - include: "#number-dec"
          - include: "#number-hex"
          - include: "#number-oct"
          - include: "#number-bin"
          - name: invalid.illegal.name.verilog"
            match: '\b[0-9]+\w+' # identifier can't start with number
  number-bin:
    name: constant.numeric.bin.verilog
    match: |-
      (?x)
        (?<![\w\.])          # not precede by a word
        (
          ({{unsignedNum}})?    # size
          '[sS]?[bB]         # binary base
        )
        [01xXzZ?][_01xXzZ?]* # binary value
        \b                   # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-oct:
    name: constant.numeric.oct.verilog
    match: |-
      (?x)
        (?<![\w\.])            # not precede by a word
        (
          ({{unsignedNum}})?      # size
          '[sS]?[oO]           # octal base
        )
        [0-7xXzZ?][_0-7xXzZ?]* # octal value
        \b                     # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-hex:
    name: constant.numeric.hex.verilog
    match: |-
      (?x)
        (?<![\w\.])                        # not precede by a word
        (
          ({{unsignedNum}})?                  # size
          '[sS]?[hH]                       # hex base
        )
        [0-9a-fA-FxXzZ?][_0-9a-fA-FxXzZ?]* # hex value
        \b                                 # boundary
    captures:
      "1": { name: storage.type.number.verilog }
  number-dec:
    name: constant.numeric.dec.verilog
    match: |-
      (?x)
        (?:
          (?<![\w\.])                      # not precede by a word
            {{unsignedNum}}
          | (?:
            (
              ({{unsignedNum}})?        # size
              '[sS]?[dD]                   # decimal base
            )
              {{unsignedNum}}           # unsigned number
            | [xXzZ?]_*
          )
        )
        (?!')                              # not followed by a ' (allowing bin, hex ... to match)
        \b                                 # boundary
    captures:
      "1":
        name: storage.type.number.verilog
  number-real:
    name: constant.numeric.float.verilog
    match: |-
      (?x)
        (?<![\w\.])                           # not precede by a word
        (?:
            {{unsignedNum}}\. {{unsignedNum}}     # unsigned number . unsigned number
          | {{unsignedNum}}(?:\. {{unsignedNum}})?
            [eE] [+-]? {{unsignedNum}}          # exp sign unsigned number
        )
        (?!')                                 # not followed by a ' (allowing dec, bin ... to match)
        \b                                    # boundary
    captures:
      "1":
        name: storage.type.number.verilog
  net-types:
    name: support.type.verilog
    match: '\b(supply0|supply1|tri|triand|trior|tri0|tri1|uwire|wire|wand|wor)\b'

  module-declaration:
    name: meta.module.verilog
    begin: |-
      (?x)
        # TODO attribute
        \b(module|macromodule)\b         # module keyword
        (?:\s)+
        \b([_a-zA-Z][_a-zA-Z$0-9]*)\b    # module identifier
    beginCaptures:
      "1": { name: storage.type.module.verilog }
      "2": { name: entity.name.type.module.verilog }
    end: '(;|(?=(?://)|(?:/\*)|\n)|(\bendmodule\b))'
    endCaptures:
      "1": { name: punctuation.section.module.begin.verilog }
      "2": { name: storage.type.module.verilog }
    patterns:
      - include: "#module-declaration-header"
  module-declaration-header:
    begin: |-
      (?x)
        # parameters
        # port list or port declarations
    end: ";"
    patterns:
      - include: "#module-parameter"
      - include: "#module-port"
      - include: "#module-port-declarations"
  module-parameter:
    begin: "#("
    beginCaptures:
      "0": { name: punctuation.definition.parameters.begin.verilog }
    endCaptures:
      "0": { name: punctuation.definition.parameters.end.verilog }
    end: ")"
    patterns:
      - match: |-
          (?x)
            \b(parameter)\b   # parameter keyword
            \s+
            \b(signed)\b
      - name: punctuation.separator.list.verilog
        match: ',(?!\))'
  parameter-declaration:
    match: >
      (parameter)
        (?:signed)? # TODO range
      | (integer|real|realtime|time) # parameter_type

scopeName: source.verilog
